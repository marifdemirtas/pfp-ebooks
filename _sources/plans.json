[
  {
    "code_template": {
      "changeable_areas": {
        "best_function": [
          "MAX",
          "MIN"
        ],
        "col": [
          "column",
          "price"
        ],
        "table": [
          "table_name",
          "products"
        ]
      },
      "changeable_areas_annotations": {
        "best_function": "Function to calculate",
        "col": "Name of the column you want to get the value",
        "table": "Name of the table"
      },
      "changeable_areas_colors": {
        "best_function": "#ccebc5",
        "col": "#b3cde3",
        "table": "#fbb4ae"
      },
      "lines": [
        "SELECT @@best_function@@(@@col@@) AS best_value",
        "FROM @@table@@;"
      ]
    },
    "goal": "Retrieve the 'best' value based on a metric from a specific column and label it as 'max_value'",
    "group": "update min",
    "order": "1",
    "plan_metadata": {
      "description": "This is a plan",
      "instruction": "To use this plan, follow these steps...",
      "usage": "This plan is used when..."
    },
    "plan_name": "Get Best Value",
    "id": 0,
    "questions": [
      {
        "type": "MCQ",
        "question_id": "MCQ_1",
        "stem": "In a database of products, you want to find the highest price among all products and label it as 'best_value'. Which SQL query would you use?",
        "correct": "SELECT MAX(price) AS best_value FROM products;",
        "distractors": [
          "SELECT MIN(price) AS best_value FROM products;",
          "SELECT MAX(column) AS best_value FROM table_name;",
          "SELECT price AS best_value FROM products;"
        ],
        "feedback": [
          "This option retrieves the minimum price, but the goal is to find the highest price.",
          "This option incorrectly uses 'column' and 'table_name' instead of 'price' and 'products'.",
          "This option selects the price without using an aggregate function to find the maximum value."
        ]
      },
      {
        "type": "True/False",
        "question_id": "True/False_1",
        "stem": "In a database of products, the following SQL query is used to find the lowest price of a product: SELECT MIN(price) AS best_value FROM products;",
        "label": "True",
        "feedback": "Incorrect. The query does indeed use the MIN function to find the lowest price from the 'price' column in the 'products' table, which matches the plan goal of retrieving the 'best' value based on the metric of minimum price."
      },
      {
        "type": "Fill in the Blank",
        "question_id": "Fill in the Blank_1",
        "stem": "You are asked to find the highest price from the 'products' table. Which function will you use to retrieve the 'best' value?",
        "area": "best_function",
        "correct": "MAX"
      },
      {
        "type": "Clickable Areas",
        "question_id": "Clickable Areas_1",
        "stem": "Click on the areas to configure a SQL query that retrieves the maximum or minimum value from a specific column in a table.",
        "areas": [
          "best_function",
          "col",
          "table"
        ]
      },
      {
        "type": "Parsons Problem",
        "question_id": "Parsons Problem_1",
        "stem": "Arrange the SQL code blocks to retrieve the highest price from the products table and label it as 'max_value'.",
        "blocks": [
          {
            "text": "SELECT MAX(price) AS max_value",
            "isDistractor": false
          },
          {
            "text": "SELECT MIN(price) AS max_value",
            "isDistractor": true
          },
          {
            "text": "FROM products;",
            "isDistractor": false
          },
          {
            "text": "FROM table_name;",
            "isDistractor": true
          }
        ],
        "correctOrder": [
          0,
          2
        ]
      }
    ]
  },
  {
    "code_template": {
      "changeable_areas": {
        "column_to_check": [
          "your_column_name",
          "album_release_date",
          "player_name"
        ],
        "table": [
          "table_name",
          "taylor_swift_discography",
          "baseball_statistics"
        ]
      },
      "changeable_areas_annotations": {
        "column_to_check": "Name of the column that should not be null",
        "table": "Name of the table to filter"
      },
      "changeable_areas_colors": {
        "column_to_check": "#decbe4",
        "table": "#fed9a6"
      },
      "lines": [
        "DELETE FROM @@table@@",
        "WHERE @@column_to_check@@ IS NULL;"
      ]
    },
    "goal": "Remove records where a column value does not exist",
    "group": "null",
    "order": "1",
    "plan_metadata": {
      "description": "This is a plan",
      "instruction": "To use this plan, follow these steps...",
      "usage": "This plan is used when..."
    },
    "plan_name": "Remove Null",
    "id": 1,
    "questions": [
      {
        "type": "True/False",
        "question_id": "True/False_1",
        "stem": "In a database containing a 'users' table, executing the plan 'Remove Null' on the 'email' column will remove all records where the email is not set.",
        "label": "True",
        "feedback": "The statement is True because the SQL query removes all records where the 'email' column value is NULL, effectively removing entries where the email is not set."
      },
      {
        "type": "Parsons Problem",
        "question_id": "Parsons Problem_1",
        "stem": "You have a table named 'employees' in your SQL database, and you need to remove all records where the 'email' column is NULL. Arrange the following code blocks in the correct order to accomplish this task.",
        "blocks": [
          {
            "text": "DELETE FROM employees",
            "isDistractor": false
          },
          {
            "text": "WHERE email IS NULL;",
            "isDistractor": false
          },
          {
            "text": "UPDATE employees SET email = ''",
            "isDistractor": true
          },
          {
            "text": "WHERE email IS NOT NULL;",
            "isDistractor": true
          }
        ],
        "correctOrder": [
          0,
          1
        ]
      }
    ]
  },
  {
    "code_template": {
      "changeable_areas": {
        "column_to_check": [
          "column1",
          "price"
        ],
        "column_to_update": [
          "column1",
          "discount"
        ],
        "condition_value": [
          "min_val"
        ],
        "new_value": [
          "0"
        ],
        "table": [
          "table_name",
          "products"
        ]
      },
      "changeable_areas_annotations": {
        "column_to_check": "",
        "column_to_update": "",
        "condition_value": "",
        "new_value": "",
        "table": "table to update"
      },
      "changeable_areas_colors": {
        "column_to_check": "#f2f2f2",
        "column_to_update": "#e5d8bd",
        "condition_value": "#b3e2cd",
        "new_value": "#fddaec",
        "table": "#ffffcc"
      },
      "lines": [
        "UPDATE @@table@@",
        "SET @@column_to_update@@ = @@new_value@@",
        "WHERE @@column_to_check@@ = @@condition_value@@;"
      ]
    },
    "goal": "Update the value of a column in all records meeting a condition",
    "group": "update min",
    "order": 2,
    "plan_metadata": {
      "description": "This is a plan",
      "instruction": "To use this plan, follow these steps...",
      "usage": "This plan is used when..."
    },
    "plan_name": "Update Values Conditionally",
    "id": 2
  },
  {
    "id": 3,
    "plan_name": "test",
    "isTest": true,
    "group": "Tests",
    "goal": "Exercise Page",
    "questions": [
      {
        "type": "True/False",
        "question_id": "True/False_1",
        "stem": "True false test",
        "correct": "",
        "distractors": [],
        "feedback": "test",
        "label": "False"
      }
    ],
    "code_template": {
      "lines": [],
      "changeable_areas": {},
      "changeable_areas_annotations": {},
      "changeable_areas_colors": {}
    }
  }
]