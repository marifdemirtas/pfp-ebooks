..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

..  shortname:: 01-introduction-b
..  description:: DataFrames in Pandas.

.. setup for automatic question numbering.

.. qnum::
   :start: 1
   :prefix: ex1-
   

.. _01_intro_b: 

Printing DataFrames
###########################################

Let's explore a DataFrame created with dummy data.

.. code-block:: python

    df = pd.DataFrame(
    {
        "A": [1, 2, 3, 4, 5],
        "B": pd.Timestamp("20130102"),
        "C": 'foo',
    })
    print(df)


.. code-block:: text

        A          B    C
    0  1 2013-01-02  foo
    1  2 2013-01-02  foo
    2  3 2013-01-02  foo
    3  4 2013-01-02  foo
    4  5 2013-01-02  foo


You can also use 'head()' function to display the first few rows of the DataFrame. By default, it displays the first 5 rows. You can specify the number of rows you want to display by passing the number as an argument to the function.

.. code-block:: python
    
    print(df.head(3))

.. code-block:: text

    A          B    C
    0  1 2013-01-02  foo
    1  2 2013-01-02  foo
    2  3 2013-01-02  foo

As you just saw, DataFrames can contain different types of data. You can check the data type of each column using the **dtypes** attribute of the DataFrame. 

.. code-block:: python

    print(df.dtypes)

.. code-block:: text
    
    A             int64
    B    datetime64[ns]
    C            object
    dtype: object

describe() shows a quick statistic summary of your data:

.. code-block:: python

    print(df.describe())

.. code-block:: text

                A
    count  5.000000
    mean   3.000000
    std    1.581139
    min    1.000000
    25%    2.000000
    50%    3.000000
    75%    4.000000
    max    5.000000


You can transpose your DataFrame:

.. code-block:: python

    print(df.T)

.. code-block:: text

                            0                    1                    2  \
        A                    1                    2                    3   
        B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   
        C                  foo                  foo                  foo   

                            3                    4  
        A                    4                    5  
        B  2013-01-02 00:00:00  2013-01-02 00:00:00  
        C                  foo                  foo  


You can also sort your DataFrame by an axis:

.. code-block:: python

    print(df.sort_index(axis=1, ascending=False))

.. code-block:: text

        C          B  A
    0  foo 2013-01-02  1
    1  foo 2013-01-02  2
    2  foo 2013-01-02  3
    3  foo 2013-01-02  4
    4  foo 2013-01-02  5

Or you can sort by values:

.. code-block:: python

    print(df.sort_values(by='B'))

.. code-block:: text

        A          B    C
    0  1 2013-01-02  foo
    1  2 2013-01-02  foo
    2  3 2013-01-02  foo
    3  4 2013-01-02  foo
    4  5 2013-01-02  foo



.. fillintheblank:: 01b_fill

   What DataFrame would be generated by the following code? Fill in the blanks.
   
   .. code-block:: python
   
    import pandas as pd

    df = pd.DataFrame({   
        "student_name": ['Alice', 'Bob', 'Charlie', 'David', 'Edward'],
        "enrollment_date": pd.Timestamp("20130102"),
        "final_grade": ['C', 'B', 'A', 'D', 'A']   
    })
    
    print(df)
    

   ``_  student_name    enrollment_date final_grade``

   ``0  Alice          2013-01-02    C``

   ``1  Bob            2013-01-02    B``

   ``2  Charlie`` |blank| ``A``

   ``3  David          2013-01-02    D``

   ``4  Edward         2013-01-02    A``

   -    :2013-01-02: Correct! Since there's only a single value for 'enrollment_date', it is repeated for each row.  
        :.*: Incorrect. 
        



.. mchoice:: get_text_mc_2
    :random:

    Let's assume we manipulate the same DataFrame. What would be the 'student_name' value for the third row?

    .. code-block:: python

        print(df.sort_values(by='final_grade'))

    -   'Alice'

        -   No, Alice has a 'C', and would be the fourth row when sorted by 'final_grade'.

    -   'Bob'

        +   Correct! Bob has a 'B', and would be the third row when sorted by 'final_grade'.

    -   'David'

        -   No, David has a 'D', and would be the fifth row when sorted by 'final_grade'.

    -   'Edward'

        -   No, Edward has an 'A', and would be the second row when sorted by 'final_grade'.

